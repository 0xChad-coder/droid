{"version":3,"sources":["../src/actions/swap.ts","../src/providers/wallet.ts","../src/templates/index.ts","../src/actions/transfer.ts","../src/types/index.ts","../src/actions/getBalance.ts","../src/actions/deploy.ts","../src/utils/contracts.ts","../src/index.ts"],"sourcesContent":["import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport { executeRoute, getRoutes } from \"@lifi/sdk\";\nimport { parseEther } from \"viem\";\n\nimport {\n    arbitrumWalletProvider,\n    initWalletProvider,\n    type WalletProvider,\n} from \"../providers/wallet\";\nimport { swapTemplate } from \"../templates\";\nimport type { SwapParams, SwapResponse } from \"../types\";\n\nexport { swapTemplate };\n\nexport class SwapAction {\n    constructor(private walletProvider: WalletProvider) {}\n\n    async swap(params: SwapParams): Promise<SwapResponse> {\n        elizaLogger.debug(\"Swap params:\", params);\n        this.validateAndNormalizeParams(params);\n        elizaLogger.debug(\"Normalized swap params:\", params);\n\n        const fromAddress = this.walletProvider.getAddress();\n        const chainId = this.walletProvider.getChainConfigs(params.chain).id;\n\n        this.walletProvider.configureLiFiSdk(params.chain);\n\n        const resp: SwapResponse = {\n            chain: params.chain,\n            txHash: \"0x\",\n            fromToken: params.fromToken,\n            toToken: params.toToken,\n            amount: params.amount,\n        };\n\n        const routes = await getRoutes({\n            fromChainId: chainId,\n            toChainId: chainId,\n            fromTokenAddress: params.fromToken,\n            toTokenAddress: params.toToken,\n            fromAmount: parseEther(params.amount).toString(),\n            fromAddress: fromAddress,\n            options: {\n                slippage: params.slippage,\n                order: \"RECOMMENDED\",\n            },\n        });\n\n        if (!routes.routes.length) throw new Error(\"No routes found\");\n\n        const execution = await executeRoute(routes.routes[0]);\n        const process =\n            execution.steps[0]?.execution?.process[\n                execution.steps[0]?.execution?.process.length - 1\n            ];\n\n        if (!process?.status || process.status === \"FAILED\") {\n            throw new Error(\"Transaction failed\");\n        }\n\n        resp.txHash = process.txHash as `0x${string}`;\n\n        return resp;\n    }\n\n    validateAndNormalizeParams(params: SwapParams): void {\n        if (params.chain !== \"arbitrum\") {\n            throw new Error(\"Only Arbitrum mainnet is supported\");\n        }\n    }\n}\n\nexport const swapAction = {\n    name: \"swap\",\n    description: \"Swap tokens on the same chain\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting swap action...\");\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n\n        state.walletInfo = await arbitrumWalletProvider.get(\n            runtime,\n            message,\n            currentState\n        );\n\n        // Compose swap context\n        const swapContext = composeContext({\n            state: currentState,\n            template: swapTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: swapContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        const walletProvider = initWalletProvider(runtime);\n        const action = new SwapAction(walletProvider);\n        const swapOptions: SwapParams = {\n            chain: content.chain,\n            fromToken: content.inputToken,\n            toToken: content.outputToken,\n            amount: content.amount,\n            slippage: content.slippage,\n        };\n        try {\n            const swapResp = await action.swap(swapOptions);\n            callback?.({\n                text: `Successfully swap ${swapResp.amount} ${swapResp.fromToken} tokens to ${swapResp.toToken}\\nTransaction Hash: ${swapResp.txHash}`,\n                content: { ...swapResp },\n            });\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during swap:\", error.message);\n            callback?.({\n                text: `Swap failed: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n    },\n    template: swapTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"ARBITRUM_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Swap 1 ETH for USDC on Arbitrum\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you swap 1 ETH for USDC on Arbitrum\",\n                    action: \"SWAP\",\n                    content: {\n                        chain: \"arbitrum\",\n                        inputToken: \"ETH\",\n                        outputToken: \"USDC\",\n                        amount: \"1\",\n                        slippage: undefined,\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Buy some token of 0x1234 using 1 USDC on Arbitrum. The slippage should be no more than 5%\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you swap 1 USDC for token 0x1234 on Arbitrum\",\n                    action: \"SWAP\",\n                    content: {\n                        chain: \"arbitrum\",\n                        inputToken: \"USDC\",\n                        outputToken: \"0x1234\",\n                        amount: \"1\",\n                        slippage: 0.05,\n                    },\n                },\n            },\n        ],\n    ],\n    similes: [\"SWAP\", \"TOKEN_SWAP\", \"EXCHANGE_TOKENS\", \"TRADE_TOKENS\"],\n};\n","import type {\n     IAgentRuntime,\n     Provider,\n     Memory,\n     State,\n} from \"@elizaos/core\";\nimport { EVM, createConfig, getToken } from \"@lifi/sdk\";\nimport type {\n    Address,\n    WalletClient,\n    PublicClient,\n    Chain,\n    HttpTransport,\n    Account,\n    PrivateKeyAccount,\n    Hex,\n} from \"viem\";\nimport {\n    createPublicClient,\n    createWalletClient,\n    formatUnits,\n    http,\n    erc20Abi,\n} from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport * as viemChains from \"viem/chains\";\nimport { createWeb3Name } from \"@web3-name-sdk/core\";\n\nimport type { SupportedChain } from \"../types\";\n\nexport class WalletProvider {\n    private currentChain: SupportedChain = \"arbitrum\";\n    chains: Record<string, Chain> = { arbitrum: viemChains.arbitrum };\n    account: PrivateKeyAccount;\n\n    constructor(privateKey: `0x${string}`, chains?: Record<string, Chain>) {\n        this.setAccount(privateKey);\n        this.setChains(chains);\n\n        if (chains && Object.keys(chains).length > 0) {\n            this.setCurrentChain(Object.keys(chains)[0] as SupportedChain);\n        }\n    }\n\n    getAccount(): PrivateKeyAccount {\n        return this.account;\n    }\n\n    getAddress(): Address {\n        return this.account.address;\n    }\n\n    getCurrentChain(): Chain {\n        return this.chains[this.currentChain];\n    }\n\n    getPublicClient(\n        chainName: SupportedChain\n    ): PublicClient<HttpTransport, Chain, Account | undefined> {\n        const transport = this.createHttpTransport(chainName);\n\n        const publicClient = createPublicClient({\n            chain: this.chains[chainName],\n            transport,\n        });\n        return publicClient;\n    }\n\n    getWalletClient(chainName: SupportedChain): WalletClient {\n        const transport = this.createHttpTransport(chainName);\n\n        const walletClient = createWalletClient({\n            chain: this.chains[chainName],\n            transport,\n            account: this.account,\n        });\n\n        return walletClient;\n    }\n\n    getChainConfigs(chainName: SupportedChain): Chain {\n        const chain = viemChains[chainName];\n\n        if (!chain?.id) {\n            throw new Error(\"Invalid chain name\");\n        }\n\n        return chain;\n    }\n\n    configureLiFiSdk(chainName: SupportedChain) {\n        const chains = Object.values(this.chains);\n        const walletClient = this.getWalletClient(chainName);\n\n        createConfig({\n            integrator: \"eliza\",\n            providers: [\n                EVM({\n                    getWalletClient: async () => walletClient,\n                    switchChain: async (chainId) =>\n                        createWalletClient({\n                            account: this.account,\n                            chain: chains.find(\n                                (chain) => chain.id === chainId\n                            ) as Chain,\n                            transport: http(),\n                        }),\n                }),\n            ],\n        });\n    }\n\n    async formatAddress(address: string): Promise<Address> {\n        if (!address || address.length === 0) {\n            throw new Error(\"Empty address\");\n        }\n\n        if (address.startsWith(\"0x\") && address.length === 42) {\n            return address as Address;\n        }\n\n        const resolvedAddress = await this.resolveWeb3Name(address);\n        if (resolvedAddress) {\n            return resolvedAddress as Address;\n        }\n        throw new Error(\"Invalid address\");\n    }\n\n    async resolveWeb3Name(name: string): Promise<string | null> {\n        const nameService = createWeb3Name();\n        return await nameService.getAddress(name);\n    }\n\n    async checkERC20Allowance(\n        chain: SupportedChain,\n        token: Address,\n        owner: Address,\n        spender: Address,\n    ): Promise<bigint> {\n        const publicClient = this.getPublicClient(chain);\n        return await publicClient.readContract({\n            address: token,\n            abi: erc20Abi,\n            functionName: \"allowance\",\n            args: [owner, spender],\n        });\n    }\n\n    async approveERC20(\n        chain: SupportedChain,\n        token: Address,\n        spender: Address,\n        amount: bigint\n    ): Promise<Hex> {\n        const publicClient = this.getPublicClient(chain);\n        const walletClient = this.getWalletClient(chain);\n        const { request } = await publicClient.simulateContract({\n            account: this.account,\n            address: token,\n            abi: erc20Abi,\n            functionName: \"approve\",\n            args: [spender, amount],\n        });\n\n        return await walletClient.writeContract(request);\n    }\n\n    async transfer(\n        chain: SupportedChain,\n        toAddress: Address,\n        amount: bigint,\n        options?: {\n            gas?: bigint;\n            gasPrice?: bigint;\n            data?: Hex;\n        }\n    ): Promise<Hex> {\n        const walletClient = this.getWalletClient(chain);\n        return await walletClient.sendTransaction({\n            account: this.account,\n            to: toAddress,\n            value: amount,\n            chain: this.getChainConfigs(chain),\n            ...options,\n        });\n    }\n\n    async transferERC20(\n        chain: SupportedChain,\n        tokenAddress: Address,\n        toAddress: Address,\n        amount: bigint,\n        options?: {\n            gas?: bigint;\n            gasPrice?: bigint;\n        }\n    ): Promise<Hex> {\n        const publicClient = this.getPublicClient(chain);\n        const walletClient = this.getWalletClient(chain);\n        const { request } = await publicClient.simulateContract({\n            account: this.account,\n            address: tokenAddress as `0x${string}`,\n            abi: erc20Abi,\n            functionName: \"transfer\",\n            args: [toAddress as `0x${string}`, amount],\n            ...options,\n        });\n\n        return await walletClient.writeContract(request);\n    }\n\n    async getBalance(): Promise<string> {\n        const client = this.getPublicClient(this.currentChain);\n        const balance = await client.getBalance({\n            address: this.account.address,\n        });\n        return formatUnits(balance, 18);\n    }\n\n    async getTokenAddress(\n        chainName: SupportedChain,\n        tokenSymbol: string\n    ): Promise<string> {\n        const token = await getToken(\n            this.getChainConfigs(chainName).id,\n            tokenSymbol\n        );\n        return token.address;\n    }\n\n    addChain(chain: Record<string, Chain>) {\n        this.setChains(chain);\n    }\n\n    switchChain(chainName: SupportedChain, customRpcUrl?: string) {\n        if (!this.chains[chainName]) {\n            const chain = WalletProvider.genChainFromName(\n                chainName,\n                customRpcUrl\n            );\n            this.addChain({ [chainName]: chain });\n        }\n        this.setCurrentChain(chainName);\n    }\n\n    private setAccount = (pk: `0x${string}`) => {\n        this.account = privateKeyToAccount(pk);\n    };\n\n    private setChains = (chains?: Record<string, Chain>) => {\n        if (!chains) {\n            return;\n        }\n        for (const chain of Object.keys(chains)) {\n            this.chains[chain] = chains[chain];\n        }\n    };\n\n    private setCurrentChain = (chain: SupportedChain) => {\n        this.currentChain = chain;\n    };\n\n    private createHttpTransport = (chainName: SupportedChain) => {\n        const chain = this.chains[chainName];\n\n        if (chain.rpcUrls.custom) {\n            return http(chain.rpcUrls.custom.http[0]);\n        }\n        return http(chain.rpcUrls.default.http[0]);\n    };\n\n    static genChainFromName(\n        chainName: string,\n        customRpcUrl?: string | null\n    ): Chain {\n        const baseChain = viemChains[chainName];\n\n        if (!baseChain?.id) {\n            throw new Error(\"Invalid chain name\");\n        }\n\n        const viemChain: Chain = customRpcUrl\n            ? {\n                  ...baseChain,\n                  rpcUrls: {\n                      ...baseChain.rpcUrls,\n                      custom: {\n                          http: [customRpcUrl],\n                      },\n                  },\n              }\n            : baseChain;\n\n        return viemChain;\n    }\n}\n\nconst genChainsFromRuntime = (\n    runtime: IAgentRuntime\n): Record<string, Chain> => {\n    const chainNames = [\"arbitrum\", \"arbitrumSepolia\"];\n    const chains = {};\n\n    for (const chainName of chainNames) {\n        const chain = WalletProvider.genChainFromName(chainName);\n        chains[chainName] = chain;\n    }\n\n    const mainnet_rpcurl = runtime.getSetting(\"ARBITRUM_PROVIDER_URL\");\n    if (mainnet_rpcurl) {\n        const chain = WalletProvider.genChainFromName(\"arbitrum\", mainnet_rpcurl);\n        chains[\"arbitrum\"] = chain;\n    }\n\n    const testnet_rpcurl = runtime.getSetting(\"ARBITRUM_TESTNET_PROVIDER_URL\");\n    if (testnet_rpcurl) {\n        const chain = WalletProvider.genChainFromName(\"arbitrumSepolia\", testnet_rpcurl);\n        chains[\"arbitrumSepolia\"] = chain;\n    }\n\n    return chains;\n};\n\nexport const initWalletProvider = (runtime: IAgentRuntime) => {\n    const privateKey = runtime.getSetting(\"ARBITRUM_PRIVATE_KEY\");\n    if (!privateKey) {\n        throw new Error(\"ARBITRUM_PRIVATE_KEY is missing\");\n    }\n\n    const chains = genChainsFromRuntime(runtime);\n\n    return new WalletProvider(privateKey as `0x${string}`, chains);\n};\n\nexport const arbitrumWalletProvider: Provider = {\n    async get(\n        runtime: IAgentRuntime,\n        _message: Memory,\n        _state?: State\n    ): Promise<string | null> {\n        try {\n            const walletProvider = initWalletProvider(runtime);\n            const address = walletProvider.getAddress();\n            const balance = await walletProvider.getBalance();\n            const chain = walletProvider.getCurrentChain();\n            return `Arbitrum chain Wallet Address: ${address}\\nBalance: ${balance} ${chain.nativeCurrency.symbol}\\nChain ID: ${chain.id}, Name: ${chain.name}`;\n        } catch (error) {\n            console.error(\"Error in Arbitrum chain wallet provider:\", error);\n            return null;\n        }\n    },\n};\n","export const getBalanceTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested check balance:\n- Chain to execute on. Must be one of [\"arbitrum\", \"arbitrumSepolia\"]. Default is \"arbitrum\".\n- Address to check balance for. Optional, must be a valid Ethereum address starting with \"0x\" or a web3 domain name. If not provided, use the Arbitrum chain Wallet Address.\n- Token symbol or address. Could be a token symbol or address. If the address is provided, it must be a valid Ethereum address starting with \"0x\". Default is \"Arbitrum\".\nIf any field is not provided, use the default value. If no default value is specified, use null.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"chain\": SUPPORTED_CHAINS,\n    \"address\": string | null,\n    \"token\": string\n}\n\\`\\`\\`\n`;\n\nexport const transferTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested transfer:\n- Chain to execute on. Must be one of [\"arbitrum\", \"arbitrumSepolia\"]. Default is \"arbitrum\".\n- Token symbol or address(string starting with \"0x\"). Optional.\n- Amount to transfer. Optional. Must be a string representing the amount in ether (only number without coin symbol, e.g., \"0.1\").\n- Recipient address. Must be a valid Ethereum address starting with \"0x\" or a web3 domain name.\n- Data. Optional, data to be included in the transaction.\nIf any field is not provided, use the default value. If no default value is specified, use null.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"chain\": SUPPORTED_CHAINS,\n    \"token\": string | null,\n    \"amount\": string | null,\n    \"toAddress\": string,\n    \"data\": string | null\n}\n\\`\\`\\`\n`;\n\nexport const swapTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested token swap:\n- Chain to execute on. Must be one of [\"arbitrum\", \"arbitrumSepolia\"]. Default is \"arbitrum\".\n- Input token symbol or address(string starting with \"0x\").\n- Output token symbol or address(string starting with \"0x\").\n- Amount to swap. Must be a string representing the amount in ether (only number without coin symbol, e.g., \"0.1\").\n- Slippage. Optional, expressed as decimal proportion, 0.03 represents 3%.\nIf any field is not provided, use the default value. If no default value is specified, use null.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"chain\": SUPPORTED_CHAINS,\n    \"inputToken\": string | null,\n    \"outputToken\": string | null,\n    \"amount\": string | null,\n    \"slippage\": number | null\n}\n\\`\\`\\`\n`;\n\nexport const bridgeTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested token bridge:\n- From chain. Must be one of [\"arbitrum\", \"arbitrumSepolia\"].\n- To chain. Must be one of [\"arbitrum\", \"arbitrumSepolia\"].\n- From token address. Optional, must be a valid Ethereum address starting with \"0x\".\n- To token address. Optional, must be a valid Ethereum address starting with \"0x\".\n- Amount to bridge. Must be a string representing the amount in ether (only number without coin symbol, e.g., \"0.1\").\n- To address. Optional, must be a valid Ethereum address starting with \"0x\" or a web3 domain name.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"fromChain\": \"arbitrum\" | \"ethereum\",\n    \"toChain\": \"arbitrum\" | \"ethereum\",\n    \"fromToken\": string | null,\n    \"toToken\": string | null,\n    \"amount\": string,\n    \"toAddress\": string | null\n}\n\\`\\`\\`\n`;\n\nexport const stakeTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested stake action:\n- Chain to execute on. Must be one of [\"arbitrum\", \"arbitrumSepolia\"]. Default is \"arbitrum\".\n- Action to execute. Must be one of [\"deposit\", \"withdraw\", \"claim\"].\n- Amount to execute. Optional, must be a string representing the amount in ether (only number without coin symbol, e.g., \"0.1\"). If the action is \"deposit\" or \"withdraw\", amount is required.\nIf any field is not provided, use the default value. If no default value is specified, use null.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"chain\": SUPPORTED_CHAINS,\n    \"action\": \"deposit\" | \"withdraw\" | \"claim\",\n    \"amount\": string | null,\n}\n\\`\\`\\`\n`;\n\nexport const faucetTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested faucet request:\n- Token. Token to request. Could be one of [\"ETH\", \"USDC\", \"ARB\"]. Optional.\n- Recipient address. Optional, must be a valid Ethereum address starting with \"0x\" or a web3 domain name. If not provided, use the Arbitrum chain Wallet Address.\nIf any field is not provided, use the default value. If no default value is specified, use null.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"token\": string | null,\n    \"toAddress\": string | null\n}\n\\`\\`\\`\n`;\n\nexport const ercContractTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nWhen user wants to deploy any type of token contract (ERC20/721/1155), this will trigger the DEPLOY_TOKEN action.\n\nExtract the following details for deploying a token contract:\n- Chain to execute on. Must be one of [\"arbitrum\", \"arbitrumSepolia\"]. Default is \"arbitrum\".\n- contractType: The type of token contract to deploy\n  - For ERC20: Extract name, symbol, decimals, totalSupply\n  - For ERC721: Extract name, symbol, baseURI\n  - For ERC1155: Extract name, baseURI\n- name: The name of the token.\n- symbol: The token symbol (only for ERC20/721).\n- decimals: Token decimals (only for ERC20). Default is 18.\n- totalSupply: Total supply with decimals (only for ERC20). Default is \"1000000000000000000\".\n- baseURI: Base URI for token metadata (only for ERC721/1155).\nIf any field is not provided, use the default value. If no default value is provided, use empty string.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"chain\": SUPPORTED_CHAINS,\n    \"contractType\": \"ERC20\" | \"ERC721\" | \"ERC1155\",\n    \"name\": string,\n    \"symbol\": string | null,\n    \"decimals\": number | null,\n    \"totalSupply\": string | null,\n    \"baseURI\": string | null\n}\n\\`\\`\\`\n`;\n","import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport {\n    formatEther,\n    formatUnits,\n    parseEther,\n    parseUnits,\n    erc20Abi,\n    type Hex,\n} from \"viem\";\n\nimport {\n    arbitrumWalletProvider,\n    initWalletProvider,\n    type WalletProvider,\n} from \"../providers/wallet\";\nimport { transferTemplate } from \"../templates\";\nimport type { TransferParams, TransferResponse } from \"../types\";\n\nexport { transferTemplate };\n\n// Exported for tests\nexport class TransferAction {\n    private readonly TRANSFER_GAS = 21000n;\n    private readonly DEFAULT_GAS_PRICE = 3000000000n as const; // 3 Gwei\n\n    constructor(private walletProvider: WalletProvider) {}\n\n    async transfer(params: TransferParams): Promise<TransferResponse> {\n        elizaLogger.debug(\"Transfer params:\", params);\n        this.validateAndNormalizeParams(params);\n        elizaLogger.debug(\"Normalized transfer params:\", params);\n\n        const fromAddress = this.walletProvider.getAddress();\n\n        this.walletProvider.switchChain(params.chain);\n\n        const nativeToken =\n            this.walletProvider.chains[params.chain].nativeCurrency.symbol;\n\n        const resp: TransferResponse = {\n            chain: params.chain,\n            txHash: \"0x\",\n            recipient: params.toAddress,\n            amount: \"\",\n            token: params.token ?? nativeToken,\n        };\n\n        if (!params.token || params.token === nativeToken) {\n            // Native token transfer\n            const options: { gas?: bigint; gasPrice?: bigint; data?: Hex } = {\n                data: params.data,\n            };\n            let value: bigint;\n            if (!params.amount) {\n                // Transfer all balance minus gas\n                const publicClient = this.walletProvider.getPublicClient(\n                    params.chain\n                );\n                const balance = await publicClient.getBalance({\n                    address: fromAddress,\n                });\n\n                value = balance - this.DEFAULT_GAS_PRICE * 21000n;\n                options.gas = this.TRANSFER_GAS;\n                options.gasPrice = this.DEFAULT_GAS_PRICE;\n            } else {\n                value = parseEther(params.amount);\n            }\n\n            resp.amount = formatEther(value);\n            resp.txHash = await this.walletProvider.transfer(\n                params.chain,\n                params.toAddress,\n                value,\n                options\n            );\n        } else {\n            // ERC20 token transfer\n            let tokenAddress = params.token;\n            if (!params.token.startsWith(\"0x\")) {\n                tokenAddress = await this.walletProvider.getTokenAddress(\n                    params.chain,\n                    params.token\n                );\n            }\n\n            const publicClient = this.walletProvider.getPublicClient(\n                params.chain\n            );\n            const decimals = await publicClient.readContract({\n                address: tokenAddress as `0x${string}`,\n                abi: erc20Abi,\n                functionName: \"decimals\",\n            });\n\n            let value: bigint;\n            if (!params.amount) {\n                value = await publicClient.readContract({\n                    address: tokenAddress as `0x${string}`,\n                    abi: erc20Abi,\n                    functionName: \"balanceOf\",\n                    args: [fromAddress],\n                });\n            } else {\n                value = parseUnits(params.amount, decimals);\n            }\n\n            resp.amount = formatUnits(value, decimals);\n            resp.txHash = await this.walletProvider.transferERC20(\n                params.chain,\n                tokenAddress as `0x${string}`,\n                params.toAddress,\n                value\n            );\n        }\n\n        if (!resp.txHash || resp.txHash === \"0x\") {\n            throw new Error(\"Get transaction hash failed\");\n        }\n\n        // wait for the transaction to be confirmed\n        const publicClient = this.walletProvider.getPublicClient(params.chain);\n        await publicClient.waitForTransactionReceipt({\n            hash: resp.txHash,\n        });\n\n        return resp;\n    }\n\n    async validateAndNormalizeParams(params: TransferParams): Promise<void> {\n        if (!params.toAddress) {\n            throw new Error(\"To address is required\");\n        }\n        params.toAddress = await this.walletProvider.formatAddress(\n            params.toAddress\n        );\n    }\n}\n\nexport const transferAction = {\n    name: \"transfer\",\n    description: \"Transfer tokens between addresses on the same chain\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting transfer action...\");\n\n        // Validate transfer\n        if (!(message.content.source === \"direct\")) {\n            callback?.({\n                text: \"I can't do that for you.\",\n                content: { error: \"Transfer not allowed\" },\n            });\n            return false;\n        }\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n        state.walletInfo = await arbitrumWalletProvider.get(\n            runtime,\n            message,\n            currentState\n        );\n\n        // Compose transfer context\n        const transferContext = composeContext({\n            state: currentState,\n            template: transferTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: transferContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        const walletProvider = initWalletProvider(runtime);\n        const action = new TransferAction(walletProvider);\n        const paramOptions: TransferParams = {\n            chain: content.chain,\n            token: content.token,\n            amount: content.amount,\n            toAddress: content.toAddress,\n            data: content.data,\n        };\n        try {\n            const transferResp = await action.transfer(paramOptions);\n            callback?.({\n                text: `Successfully transferred ${transferResp.amount} ${transferResp.token} to ${transferResp.recipient}\\nTransaction Hash: ${transferResp.txHash}`,\n                content: { ...transferResp },\n            });\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during transfer:\", error.message);\n            callback?.({\n                text: `Transfer failed: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n    },\n    template: transferTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"ARBITRUM_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Transfer 1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you transfer 1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e on Arbitrum\",\n                    action: \"TRANSFER\",\n                    content: {\n                        chain: \"arbitrum\",\n                        token: \"ETH\",\n                        amount: \"1\",\n                        toAddress: \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Transfer 1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e on Arbitrum Sepolia\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you transfer 1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e on Arbitrum Sepolia\",\n                    action: \"TRANSFER\",\n                    content: {\n                        chain: \"arbitrumSepolia\",\n                        token: \"ETH\",\n                        amount: \"1\",\n                        toAddress: \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Transfer 1 token of 0x1234 to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you transfer 1 token of 0x1234 to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e on Arbitrum\",\n                    action: \"TRANSFER\",\n                    content: {\n                        chain: \"arbitrum\",\n                        token: \"0x1234\",\n                        amount: \"1\",\n                        toAddress: \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                    },\n                },\n            },\n        ],\n    ],\n    similes: [\"TRANSFER\", \"SEND_TOKENS\", \"TOKEN_TRANSFER\", \"MOVE_TOKENS\"],\n};\n","import type { Address, Hash } from \"viem\";\n\nexport type SupportedChain = \"arbitrum\" | \"arbitrumSepolia\";\nexport type StakeAction = \"deposit\" | \"withdraw\" | \"claim\";\n\n// Action parameters\nexport interface GetBalanceParams {\n    chain: SupportedChain;\n    address?: Address;\n    token: string;\n}\n\nexport interface TransferParams {\n    chain: SupportedChain;\n    token?: string;\n    amount?: string;\n    toAddress: Address;\n    data?: `0x${string}`;\n}\n\nexport interface SwapParams {\n    chain: SupportedChain;\n    fromToken: string;\n    toToken: string;\n    amount: string;\n    slippage?: number;\n}\n\nexport interface BridgeParams {\n    fromChain: SupportedChain;\n    toChain: SupportedChain;\n    fromToken?: Address;\n    toToken?: Address;\n    amount: string;\n    toAddress?: Address;\n}\n\nexport interface StakeParams {\n    chain: SupportedChain;\n    action: StakeAction;\n    amount?: string;\n}\n\nexport interface FaucetParams {\n    token?: string;\n    toAddress?: Address;\n}\n\n// Action return types\nexport interface GetBalanceResponse {\n    chain: SupportedChain;\n    address: Address;\n    balance?: { token: string; amount: string };\n}\n\nexport interface TransferResponse {\n    chain: SupportedChain;\n    txHash: Hash;\n    recipient: Address;\n    amount: string;\n    token: string;\n    data?: `0x${string}`;\n}\n\nexport interface SwapResponse {\n    chain: SupportedChain;\n    txHash: Hash;\n    fromToken: string;\n    toToken: string;\n    amount: string;\n}\n\nexport interface BridgeResponse {\n    fromChain: SupportedChain;\n    toChain: SupportedChain;\n    txHash: Hash;\n    recipient: Address;\n    fromToken: string;\n    toToken: string;\n    amount: string;\n}\n\nexport interface StakeResponse {\n    response: string;\n}\n\nexport interface FaucetResponse {\n    token: string;\n    recipient: Address;\n    txHash: Hash;\n}\n\nexport interface IDeployERC20Params {\n    chain: SupportedChain;\n    name: string;\n    symbol: string;\n    decimals: number;\n    totalSupply: string;\n}\n\nexport interface IDeployERC721Params {\n    chain: SupportedChain;\n    name: string;\n    symbol: string;\n    baseURI: string;\n}\n\nexport interface IDeployERC1155Params {\n    chain: SupportedChain;\n    name: string;\n    baseURI: string;\n}\n\n// Contract ABIs\nexport const L1StandardBridgeAbi = [\n    {\n        type: \"constructor\",\n        inputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"receive\",\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"MESSENGER\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract CrossDomainMessenger\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"OTHER_BRIDGE\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract StandardBridge\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"bridgeERC20\",\n        inputs: [\n            {\n                name: \"_localToken\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_remoteToken\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"bridgeERC20To\",\n        inputs: [\n            {\n                name: \"_localToken\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_remoteToken\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"bridgeETH\",\n        inputs: [\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"bridgeETHTo\",\n        inputs: [\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"depositERC20\",\n        inputs: [\n            {\n                name: \"_l1Token\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_l2Token\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"depositERC20To\",\n        inputs: [\n            {\n                name: \"_l1Token\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_l2Token\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"depositETH\",\n        inputs: [\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"depositETHTo\",\n        inputs: [\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_minGasLimit\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"deposits\",\n        inputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"finalizeBridgeERC20\",\n        inputs: [\n            {\n                name: \"_localToken\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_remoteToken\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_from\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"finalizeBridgeETH\",\n        inputs: [\n            {\n                name: \"_from\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"finalizeERC20Withdrawal\",\n        inputs: [\n            {\n                name: \"_l1Token\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_l2Token\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_from\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"finalizeETHWithdrawal\",\n        inputs: [\n            {\n                name: \"_from\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_to\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n            {\n                name: \"_amount\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            {\n                name: \"_extraData\",\n                type: \"bytes\",\n                internalType: \"bytes\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"initialize\",\n        inputs: [\n            {\n                name: \"_messenger\",\n                type: \"address\",\n                internalType: \"contract CrossDomainMessenger\",\n            },\n            {\n                name: \"_superchainConfig\",\n                type: \"address\",\n                internalType: \"contract SuperchainConfig\",\n            },\n            {\n                name: \"_systemConfig\",\n                type: \"address\",\n                internalType: \"contract SystemConfig\",\n            },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"l2TokenBridge\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"messenger\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract CrossDomainMessenger\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"otherBridge\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract StandardBridge\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"paused\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\",\n                internalType: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"superchainConfig\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract SuperchainConfig\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"systemConfig\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"contract SystemConfig\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"version\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\",\n                internalType: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"event\",\n        name: \"ERC20BridgeFinalized\",\n        inputs: [\n            {\n                name: \"localToken\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"remoteToken\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: false,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ERC20BridgeInitiated\",\n        inputs: [\n            {\n                name: \"localToken\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"remoteToken\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: false,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ERC20DepositInitiated\",\n        inputs: [\n            {\n                name: \"l1Token\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"l2Token\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: false,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ERC20WithdrawalFinalized\",\n        inputs: [\n            {\n                name: \"l1Token\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"l2Token\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: false,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ETHBridgeFinalized\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ETHBridgeInitiated\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ETHDepositInitiated\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"ETHWithdrawalFinalized\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: \"event\",\n        name: \"Initialized\",\n        inputs: [\n            {\n                name: \"version\",\n                type: \"uint8\",\n                indexed: false,\n                internalType: \"uint8\",\n            },\n        ],\n        anonymous: false,\n    },\n] as const;\n\nexport const L2StandardBridgeAbi = [\n    {\n        type: \"constructor\",\n        inputs: [\n            {\n                name: \"_owner\",\n                type: \"address\",\n                internalType: \"address payable\",\n            },\n            {\n                name: \"_delegationFee\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        name: \"AddressEmptyCode\",\n        type: \"error\",\n        inputs: [{ name: \"target\", type: \"address\", internalType: \"address\" }],\n    },\n    {\n        name: \"AddressInsufficientBalance\",\n        type: \"error\",\n        inputs: [{ name: \"account\", type: \"address\", internalType: \"address\" }],\n    },\n    { name: \"FailedInnerCall\", type: \"error\", inputs: [] },\n    {\n        name: \"OwnableInvalidOwner\",\n        type: \"error\",\n        inputs: [{ name: \"owner\", type: \"address\", internalType: \"address\" }],\n    },\n    {\n        name: \"OwnableUnauthorizedAccount\",\n        type: \"error\",\n        inputs: [{ name: \"account\", type: \"address\", internalType: \"address\" }],\n    },\n    {\n        name: \"SafeERC20FailedOperation\",\n        type: \"error\",\n        inputs: [{ name: \"token\", type: \"address\", internalType: \"address\" }],\n    },\n    {\n        name: \"OwnershipTransferred\",\n        type: \"event\",\n        inputs: [\n            {\n                name: \"previousOwner\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"newOwner\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n        ],\n        anonymous: false,\n        signature:\n            \"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\",\n    },\n    {\n        name: \"SetDelegationFee\",\n        type: \"event\",\n        inputs: [\n            {\n                name: \"_delegationFee\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n        ],\n        anonymous: false,\n        signature:\n            \"0x0322f3257c2afe5fe8da7ab561f0d3384148487412fe2751678f2188731c0815\",\n    },\n    {\n        name: \"WithdrawTo\",\n        type: \"event\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"l2Token\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\",\n            },\n            {\n                name: \"to\",\n                type: \"address\",\n                indexed: false,\n                internalType: \"address\",\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\",\n            },\n            {\n                name: \"minGasLimit\",\n                type: \"uint32\",\n                indexed: false,\n                internalType: \"uint32\",\n            },\n            {\n                name: \"extraData\",\n                type: \"bytes\",\n                indexed: false,\n                internalType: \"bytes\",\n            },\n        ],\n        anonymous: false,\n        signature:\n            \"0x56f66275d9ebc94b7d6895aa0d96a3783550d0183ba106408d387d19f2e877f1\",\n    },\n    {\n        name: \"L2_STANDARD_BRIDGE\",\n        type: \"function\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                value: \"0x4200000000000000000000000000000000000010\",\n                internalType: \"contract IL2StandardBridge\",\n            },\n        ],\n        constant: true,\n        signature: \"0x21d12763\",\n        stateMutability: \"view\",\n    },\n    {\n        name: \"L2_STANDARD_BRIDGE_ADDRESS\",\n        type: \"function\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                value: \"0x4200000000000000000000000000000000000010\",\n                internalType: \"address\",\n            },\n        ],\n        constant: true,\n        signature: \"0x2cb7cb06\",\n        stateMutability: \"view\",\n    },\n    {\n        name: \"delegationFee\",\n        type: \"function\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\",\n                value: \"2000000000000000\",\n                internalType: \"uint256\",\n            },\n        ],\n        constant: true,\n        signature: \"0xc5f0a58f\",\n        stateMutability: \"view\",\n    },\n    {\n        name: \"owner\",\n        type: \"function\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                value: \"0xCe4750fDc02A07Eb0d99cA798CD5c170D8F8410A\",\n                internalType: \"address\",\n            },\n        ],\n        constant: true,\n        signature: \"0x8da5cb5b\",\n        stateMutability: \"view\",\n    },\n    {\n        name: \"renounceOwnership\",\n        type: \"function\",\n        inputs: [],\n        outputs: [],\n        signature: \"0x715018a6\",\n        stateMutability: \"nonpayable\",\n    },\n    {\n        name: \"setDelegationFee\",\n        type: \"function\",\n        inputs: [\n            {\n                name: \"_delegationFee\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n        ],\n        outputs: [],\n        signature: \"0x55bfc81c\",\n        stateMutability: \"nonpayable\",\n    },\n    {\n        name: \"transferOwnership\",\n        type: \"function\",\n        inputs: [\n            { name: \"newOwner\", type: \"address\", internalType: \"address\" },\n        ],\n        outputs: [],\n        signature: \"0xf2fde38b\",\n        stateMutability: \"nonpayable\",\n    },\n    {\n        name: \"withdraw\",\n        type: \"function\",\n        inputs: [\n            { name: \"_l2Token\", type: \"address\", internalType: \"address\" },\n            { name: \"_amount\", type: \"uint256\", internalType: \"uint256\" },\n            { name: \"_minGasLimit\", type: \"uint32\", internalType: \"uint32\" },\n            { name: \"_extraData\", type: \"bytes\", internalType: \"bytes\" },\n        ],\n        outputs: [],\n        payable: true,\n        signature: \"0x32b7006d\",\n        stateMutability: \"payable\",\n    },\n    {\n        name: \"withdrawFee\",\n        type: \"function\",\n        inputs: [\n            { name: \"_recipient\", type: \"address\", internalType: \"address\" },\n        ],\n        outputs: [],\n        signature: \"0x1ac3ddeb\",\n        stateMutability: \"nonpayable\",\n    },\n    {\n        name: \"withdrawFeeToL1\",\n        type: \"function\",\n        inputs: [\n            { name: \"_recipient\", type: \"address\", internalType: \"address\" },\n            { name: \"_minGasLimit\", type: \"uint32\", internalType: \"uint32\" },\n            { name: \"_extraData\", type: \"bytes\", internalType: \"bytes\" },\n        ],\n        outputs: [],\n        signature: \"0x244cafe0\",\n        stateMutability: \"nonpayable\",\n    },\n    {\n        name: \"withdrawTo\",\n        type: \"function\",\n        inputs: [\n            { name: \"_l2Token\", type: \"address\", internalType: \"address\" },\n            { name: \"_to\", type: \"address\", internalType: \"address\" },\n            { name: \"_amount\", type: \"uint256\", internalType: \"uint256\" },\n            { name: \"_minGasLimit\", type: \"uint32\", internalType: \"uint32\" },\n            { name: \"_extraData\", type: \"bytes\", internalType: \"bytes\" },\n        ],\n        outputs: [],\n        payable: true,\n        signature: \"0xa3a79548\",\n        stateMutability: \"payable\",\n    },\n] as const;\n","import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport { getToken } from \"@lifi/sdk\";\n\nimport {\n    arbitrumWalletProvider,\n    initWalletProvider,\n    type WalletProvider,\n} from \"../providers/wallet\";\nimport { getBalanceTemplate } from \"../templates\";\nimport type {\n    GetBalanceParams,\n    GetBalanceResponse,\n    SupportedChain,\n} from \"../types\";\nimport { type Address, erc20Abi, formatEther, formatUnits } from \"viem\";\n\nexport { getBalanceTemplate };\n\nexport class GetBalanceAction {\n    constructor(private walletProvider: WalletProvider) {}\n\n    async getBalance(params: GetBalanceParams): Promise<GetBalanceResponse> {\n        elizaLogger.debug(\"Get balance params:\", params);\n        await this.validateAndNormalizeParams(params);\n        elizaLogger.debug(\"Normalized get balance params:\", params);\n\n        const { chain, address, token } = params;\n        if (!address) {\n            throw new Error(\"Address is required for getting balance\");\n        }\n\n        this.walletProvider.switchChain(chain);\n        const nativeSymbol =\n            this.walletProvider.getChainConfigs(chain).nativeCurrency.symbol;\n        const chainId = this.walletProvider.getChainConfigs(chain).id;\n\n        let queryNativeToken = false;\n        if (\n            !token ||\n            token === \"\" ||\n            token.toLowerCase() === \"eth\"\n        ) {\n            queryNativeToken = true;\n        }\n\n        const resp: GetBalanceResponse = {\n            chain,\n            address,\n        };\n\n        // If ERC20 token is requested\n        if (!queryNativeToken) {\n            let amount: string;\n            if (token.startsWith(\"0x\")) {\n                amount = await this.getERC20TokenBalance(\n                    chain,\n                    address,\n                    token as `0x${string}`\n                );\n            } else {\n                if (chainId !== 42161) {\n                    throw new Error(\n                        \"Only Arbitrum mainnet is supported for querying balance by token symbol\"\n                    );\n                }\n\n                this.walletProvider.configureLiFiSdk(chain);\n                const tokenInfo = await getToken(chainId, token);\n                amount = await this.getERC20TokenBalance(\n                    chain,\n                    address,\n                    tokenInfo.address as `0x${string}`\n                );\n            }\n\n            resp.balance = { token, amount };\n        } else {\n            // If native token is requested\n            const nativeBalanceWei = await this.walletProvider\n                .getPublicClient(chain)\n                .getBalance({ address });\n            resp.balance = {\n                token: nativeSymbol,\n                amount: formatEther(nativeBalanceWei),\n            };\n        }\n\n        return resp;\n    }\n\n    async getERC20TokenBalance(\n        chain: SupportedChain,\n        address: Address,\n        tokenAddress: Address\n    ): Promise<string> {\n        const publicClient = this.walletProvider.getPublicClient(chain);\n\n        const balance = await publicClient.readContract({\n            address: tokenAddress,\n            abi: erc20Abi,\n            functionName: \"balanceOf\",\n            args: [address],\n        });\n\n        const decimals = await publicClient.readContract({\n            address: tokenAddress,\n            abi: erc20Abi,\n            functionName: \"decimals\",\n        });\n\n        return formatUnits(balance, decimals);\n    }\n\n    async validateAndNormalizeParams(params: GetBalanceParams): Promise<void> {\n        if (!params.address) {\n            params.address = this.walletProvider.getAddress();\n        } else {\n            params.address = await this.walletProvider.formatAddress(\n                params.address\n            );\n        }\n    }\n}\n\nexport const getBalanceAction = {\n    name: \"getBalance\",\n    description: \"Get balance of a token or all tokens for the given address\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting getBalance action...\");\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n        state.walletInfo = await arbitrumWalletProvider.get(\n            runtime,\n            message,\n            currentState\n        );\n\n        // Compose swap context\n        const getBalanceContext = composeContext({\n            state: currentState,\n            template: getBalanceTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: getBalanceContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        const walletProvider = initWalletProvider(runtime);\n        const action = new GetBalanceAction(walletProvider);\n        const getBalanceOptions: GetBalanceParams = {\n            chain: content.chain,\n            address: content.address,\n            token: content.token,\n        };\n        try {\n            const getBalanceResp = await action.getBalance(getBalanceOptions);\n            if (callback) {\n                let text = `No balance found for ${getBalanceOptions.address} on ${getBalanceOptions.chain}`;\n                if (getBalanceResp.balance) {\n                    text = `Balance of ${getBalanceResp.address} on ${getBalanceResp.chain}:\\n${\n                        getBalanceResp.balance.token\n                    }: ${getBalanceResp.balance.amount}`;\n                }\n                callback({\n                    text,\n                    content: { ...getBalanceResp },\n                });\n            }\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during get balance:\", error.message);\n            callback?.({\n                text: `Get balance failed: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n    },\n    template: getBalanceTemplate,\n    validate: async (_runtime: IAgentRuntime) => {\n        return true;\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Check my balance of USDC\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you check your balance of USDC\",\n                    action: \"GET_BALANCE\",\n                    content: {\n                        chain: \"arbitrum\",\n                        address: \"{{walletAddress}}\",\n                        token: \"USDC\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Check my balance of token 0x1234\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you check your balance of token 0x1234\",\n                    action: \"GET_BALANCE\",\n                    content: {\n                        chain: \"arbitrum\",\n                        address: \"{{walletAddress}}\",\n                        token: \"0x1234\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Get USDC balance of 0x1234\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you check USDC balance of 0x1234\",\n                    action: \"GET_BALANCE\",\n                    content: {\n                        chain: \"arbitrum\",\n                        address: \"0x1234\",\n                        token: \"USDC\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Check my wallet balance on Arbitrum\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you check your wallet balance on Arbitrum\",\n                    action: \"GET_BALANCE\",\n                    content: {\n                        chain: \"arbitrum\",\n                        address: \"{{walletAddress}}\",\n                        token: undefined,\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Check my wallet balance on Arbitrum Sepolia\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you check your wallet balance on Arbitrum Sepolia\",\n                    action: \"GET_BALANCE\",\n                    content: {\n                        chain: \"arbitrumSepolia\",\n                        address: \"{{walletAddress}}\",\n                        token: undefined,\n                    },\n                },\n            },\n        ],\n    ],\n    similes: [\"GET_BALANCE\", \"CHECK_BALANCE\"],\n};\n","import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport solc from \"solc\";\nimport { type Abi, type Address, parseUnits } from \"viem\";\nimport {\n    arbitrumWalletProvider,\n    initWalletProvider,\n    type WalletProvider,\n} from \"../providers/wallet\";\nimport { ercContractTemplate } from \"../templates\";\nimport type {\n    IDeployERC1155Params,\n    IDeployERC721Params,\n    IDeployERC20Params,\n    SupportedChain,\n} from \"../types\";\nimport { compileSolidity } from \"../utils/contracts\";\n\nexport { ercContractTemplate };\n\nexport class DeployAction {\n    constructor(private walletProvider: WalletProvider) {}\n\n    async compileSolidity(contractName: string, source: string) {\n        const solName = `${contractName}.sol`;\n        const input = {\n            language: \"Solidity\",\n            sources: {\n                [solName]: {\n                    content: source,\n                },\n            },\n            settings: {\n                outputSelection: {\n                    \"*\": {\n                        \"*\": [\"*\"],\n                    },\n                },\n            },\n        };\n        elizaLogger.debug(\"Compiling contract...\");\n        const output = JSON.parse(solc.compile(JSON.stringify(input)));\n\n        // check compile error\n        if (output.errors) {\n            const hasError = output.errors.some(\n                (error) => error.type === \"Error\"\n            );\n            if (hasError) {\n                elizaLogger.error(\n                    `Compilation errors: ${JSON.stringify(output.errors, null, 2)}`\n                );\n            }\n        }\n\n        const contract = output.contracts[solName][contractName];\n\n        if (!contract) {\n            elizaLogger.error(\"Compilation result is empty\");\n        }\n\n        elizaLogger.debug(\"Contract compiled successfully\");\n        return {\n            abi: contract.abi as Abi,\n            bytecode: contract.evm.bytecode.object,\n        };\n    }\n\n    async deployERC20(deployTokenParams: IDeployERC20Params) {\n        elizaLogger.debug(\"deployTokenParams\", deployTokenParams);\n\n        const { name, symbol, decimals, totalSupply, chain } =\n            deployTokenParams;\n        if (!name || name === \"\") {\n            throw new Error(\"Token name is required\");\n        }\n        if (!symbol || symbol === \"\") {\n            throw new Error(\"Token symbol is required\");\n        }\n        if (!decimals || decimals === 0) {\n            throw new Error(\"Token decimals is required\");\n        }\n        if (!totalSupply || totalSupply === \"\") {\n            throw new Error(\"Token total supply is required\");\n        }\n\n        try {\n            const totalSupplyWithDecimals = parseUnits(totalSupply, decimals);\n            const args = [name, symbol, decimals, totalSupplyWithDecimals];\n            const contractAddress = await this.deployContract(\n                chain,\n                \"ERC20Contract\",\n                args\n            );\n\n            return {\n                address: contractAddress,\n            };\n        } catch (error) {\n            elizaLogger.error(\"Deploy ERC20 failed:\", error.message);\n            throw error;\n        }\n    }\n\n    async deployERC721(deployNftParams: IDeployERC721Params) {\n        elizaLogger.debug(\"deployNftParams\", deployNftParams);\n\n        const { baseURI, name, symbol, chain } = deployNftParams;\n        if (!name || name === \"\") {\n            throw new Error(\"Token name is required\");\n        }\n        if (!symbol || symbol === \"\") {\n            throw new Error(\"Token symbol is required\");\n        }\n        if (!baseURI || baseURI === \"\") {\n            throw new Error(\"Token baseURI is required\");\n        }\n        try {\n            const args = [name, symbol, baseURI];\n            const contractAddress = await this.deployContract(\n                chain,\n                \"ERC721Contract\",\n                args\n            );\n\n            return {\n                address: contractAddress,\n            };\n        } catch (error) {\n            elizaLogger.error(\"Deploy ERC721 failed:\", error.message);\n            throw error;\n        }\n    }\n\n    async deployERC1155(deploy1155Params: IDeployERC1155Params) {\n        elizaLogger.debug(\"deploy1155Params\", deploy1155Params);\n\n        const { baseURI, name, chain } = deploy1155Params;\n        if (!name || name === \"\") {\n            throw new Error(\"Token name is required\");\n        }\n        if (!baseURI || baseURI === \"\") {\n            throw new Error(\"Token baseURI is required\");\n        }\n        try {\n            const args = [name, baseURI];\n            const contractAddress = await this.deployContract(\n                chain,\n                \"ERC1155Contract\",\n                args\n            );\n\n            return {\n                address: contractAddress,\n            };\n        } catch (error) {\n            elizaLogger.error(\"Deploy ERC1155 failed:\", error.message);\n            throw error;\n        }\n    }\n\n    async deployContract(\n        chain: SupportedChain,\n        contractName: string,\n        args: any[]\n    ): Promise<Address | null | undefined> {\n        const { abi, bytecode } = await compileSolidity(contractName);\n        if (!bytecode) {\n            throw new Error(\"Bytecode is empty after compilation\");\n        }\n\n        this.walletProvider.switchChain(chain);\n\n        const chainConfig = this.walletProvider.getChainConfigs(chain);\n        const walletClient = this.walletProvider.getWalletClient(chain);\n        const hash = await walletClient.deployContract({\n            account: this.walletProvider.getAccount(),\n            abi,\n            bytecode,\n            args,\n            chain: chainConfig,\n        });\n\n        elizaLogger.debug(\"Waiting for deployment transaction...\", hash);\n        const publicClient = this.walletProvider.getPublicClient(chain);\n        const receipt = await publicClient.waitForTransactionReceipt({\n            hash,\n        });\n        elizaLogger.debug(\"Contract deployed successfully!\");\n\n        return receipt.contractAddress;\n    }\n}\n\nexport const deployAction = {\n    name: \"DEPLOY_TOKEN\",\n    description:\n        \"Deploy token contracts (ERC20/721/1155) based on user specifications\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting deploy action...\");\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n\n        state.walletInfo = await arbitrumWalletProvider.get(runtime, message, currentState);\n\n        // Compose context\n        const context = composeContext({\n            state: currentState,\n            template: ercContractTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: context,\n            modelClass: ModelClass.LARGE,\n        });\n\n        const walletProvider = initWalletProvider(runtime);\n        const action = new DeployAction(walletProvider);\n        try {\n            const contractType = content.contractType;\n            let result: any;\n            switch (contractType.toLocaleLowerCase()) {\n                case \"erc20\":\n                    result = await action.deployERC20({\n                        chain: content.chain,\n                        decimals: content.decimals,\n                        symbol: content.symbol,\n                        name: content.name,\n                        totalSupply: content.totalSupply,\n                    });\n                    break;\n                case \"erc721\":\n                    result = await action.deployERC721({\n                        chain: content.chain,\n                        name: content.name,\n                        symbol: content.symbol,\n                        baseURI: content.baseURI,\n                    });\n                    break;\n                case \"erc1155\":\n                    result = await action.deployERC1155({\n                        chain: content.chain,\n                        name: content.name,\n                        baseURI: content.baseURI,\n                    });\n                    break;\n            }\n\n            if (result) {\n                callback?.({\n                    text: `Successfully create contract - ${result?.address}`,\n                    content: { ...result },\n                });\n            } else {\n                callback?.({\n                    text: \"Unsuccessfully create contract\",\n                    content: { ...result },\n                });\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during deploy:\", error.message);\n            callback?.({\n                text: `Deploy failed: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n    },\n    template: ercContractTemplate,\n    validate: async (_runtime: IAgentRuntime) => {\n        return true;\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"deploy an ERC20 token with name 'MyToken', symbol 'MTK', decimals 18, total supply 10000\",\n                    action: \"DEPLOY_TOKEN\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Deploy an ERC721 NFT contract with name 'MyNFT', symbol 'MNFT', baseURI 'https://my-nft-base-uri.com'\",\n                    action: \"DEPLOY_TOKEN\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Deploy an ERC1155 contract with name 'My1155', baseURI 'https://my-1155-base-uri.com'\",\n                    action: \"DEPLOY_TOKEN\",\n                },\n            },\n        ],\n    ],\n    similes: [\n        \"DEPLOY_ERC20\",\n        \"DEPLOY_ERC721\",\n        \"DEPLOY_ERC1155\",\n        \"CREATE_TOKEN\",\n        \"CREATE_NFT\",\n        \"CREATE_1155\",\n    ],\n};\n","import { elizaLogger } from \"@elizaos/core\";\nimport fs from \"node:fs\";\nimport { createRequire } from \"node:module\";\nimport path from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\nimport solc from \"solc\";\n\nconst require = createRequire(import.meta.url);\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst baseDir = path.resolve(__dirname, \"../../plugin-arbitrum/src/contracts\");\n\nfunction getContractSource(contractPath: string) {\n    return fs.readFileSync(contractPath, \"utf8\");\n}\n\nfunction findImports(importPath: string) {\n    try {\n        if (importPath.startsWith(\"@openzeppelin/\")) {\n            const modPath = require.resolve(importPath);\n            return { contents: fs.readFileSync(modPath, \"utf8\") };\n        }\n\n        const localPath = path.resolve(\"./contracts\", importPath);\n        if (fs.existsSync(localPath)) {\n            return { contents: fs.readFileSync(localPath, \"utf8\") };\n        }\n        return { error: \"File not found\" };\n    } catch {\n        return { error: `File not found: ${importPath}` };\n    }\n}\n\nexport async function compileSolidity(contractFileName: string) {\n    const contractPath = path.join(baseDir, `${contractFileName}.sol`);\n    const source = getContractSource(contractPath);\n\n    const input = {\n        language: \"Solidity\",\n        sources: {\n            [contractFileName]: {\n                content: source,\n            },\n        },\n        settings: {\n            optimizer: {\n                enabled: true,\n                runs: 200,\n            },\n            outputSelection: {\n                \"*\": {\n                    \"*\": [\"*\"],\n                },\n            },\n        },\n    };\n\n    elizaLogger.debug(\"Compiling contract...\");\n\n    try {\n        const output = JSON.parse(\n            solc.compile(JSON.stringify(input), { import: findImports })\n        );\n\n        if (output.errors) {\n            const hasError = output.errors.some(\n                (error) => error.type === \"Error\"\n            );\n            if (hasError) {\n                throw new Error(\n                    `Compilation errors: ${JSON.stringify(output.errors, null, 2)}`\n                );\n            }\n            elizaLogger.warn(\"Compilation warnings:\", output.errors);\n        }\n\n        const contractName = path.basename(contractFileName, \".sol\");\n        const contract = output.contracts[contractFileName][contractName];\n\n        if (!contract) {\n            throw new Error(\"Contract compilation result is empty\");\n        }\n\n        elizaLogger.debug(\"Contract compiled successfully\");\n        return {\n            abi: contract.abi,\n            bytecode: contract.evm.bytecode.object,\n        };\n    } catch (error) {\n        elizaLogger.error(\"Compilation failed:\", error.message);\n        throw error;\n    }\n}\n","export * from \"./actions/swap\";\nexport * from \"./actions/transfer\";\nexport * from \"./providers/wallet\";\nexport * from \"./types\";\n\nimport type { Plugin } from \"@elizaos/core\";\nimport { swapAction } from \"./actions/swap\";\nimport { transferAction } from \"./actions/transfer\";\nimport { arbitrumWalletProvider } from \"./providers/wallet\";\nimport { getBalanceAction } from \"./actions/getBalance\";\n// import { bridgeAction } from \"./actions/bridge\";\n// import { stakeAction } from \"./actions/stake\";\n// import { faucetAction } from \"./actions/faucet\";\nimport { deployAction } from \"./actions/deploy\";\n\nexport const arbitrumPlugin: Plugin = {\n    name: \"arbitrum\",\n    description:\n        \"Arbitrum integration plugin supporting transfers, swaps, staking, bridging, and token deployments\",\n    providers: [arbitrumWalletProvider],\n    evaluators: [],\n    services: [],\n    actions: [\n        getBalanceAction,\n        transferAction,\n        swapAction,\n        // bridgeAction,\n        // stakeAction,\n        // faucetAction,\n        deployAction,\n    ],\n};\n\nexport default arbitrumPlugin;\n"],"mappings":"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","names":["composeContext","elizaLogger","generateObjectDeprecated","ModelClass","formatUnits","parseEther","erc20Abi","elizaLogger","publicClient","parseEther","erc20Abi","formatUnits","composeContext","generateObjectDeprecated","ModelClass","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","getToken","erc20Abi","formatEther","formatUnits","elizaLogger","getToken","formatEther","erc20Abi","formatUnits","composeContext","generateObjectDeprecated","ModelClass","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","solc","parseUnits","elizaLogger","require","elizaLogger","solc","parseUnits","composeContext","generateObjectDeprecated","ModelClass"]}